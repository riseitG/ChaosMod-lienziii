(()=>{"use strict";var t=function(){function t(){this.handlers=[]}return t.prototype.addEventListener=function(t){this.handlers.push(t)},t.prototype.removeEventListener=function(t){this.handlers=this.handlers.filter((function(e){return e!==t}))},t.prototype.dispatch=function(t){this.handlers.slice(0).forEach((function(e){return e(t)}))},t}(),e=function(){function e(e){this.WS=null,this.createEvent=new t,this.connectEvent=new t,this.disconnectEvent=new t,this.endEvent=new t,this.noVoteRoundEvent=new t,this.updateEvent=new t,this.URL=e,this.onSocketClose=this.onSocketClose.bind(this),this.onSocketError=this.onSocketError.bind(this),this.onSocketMessage=this.onSocketMessage.bind(this),this.onSocketOpen=this.onSocketOpen.bind(this),this.connect()}return e.prototype.addCreateVoteListener=function(t){this.createEvent.addEventListener(t)},e.prototype.addConnectListener=function(t){this.connectEvent.addEventListener(t)},e.prototype.addDisconnectListener=function(t){this.disconnectEvent.addEventListener(t)},e.prototype.addEndVoteListener=function(t){this.endEvent.addEventListener(t)},e.prototype.addNoVotingRoundListener=function(t){this.noVoteRoundEvent.addEventListener(t)},e.prototype.addUpdateVoteListener=function(t){this.updateEvent.addEventListener(t)},e.prototype.removeCreateVoteListener=function(t){this.createEvent.removeEventListener(t)},e.prototype.removeConnectListener=function(t){this.connectEvent.removeEventListener(t)},e.prototype.removeOnDisconnectListener=function(t){this.disconnectEvent.removeEventListener(t)},e.prototype.removeEndVoteListener=function(t){this.endEvent.removeEventListener(t)},e.prototype.removeNoVotingRoundListener=function(t){this.noVoteRoundEvent.removeEventListener(t)},e.prototype.removeUpdateVoteListener=function(t){this.updateEvent.removeEventListener(t)},e.prototype.connect=function(){try{this.WS=new WebSocket(this.URL),this.WS.addEventListener("close",this.onSocketClose),this.WS.addEventListener("error",this.onSocketError),this.WS.addEventListener("message",this.onSocketMessage),this.WS.addEventListener("open",this.onSocketOpen)}catch(t){}},e.prototype.onSocketError=function(t){console.log("error in socket occurred: ".concat(t.message,". closing socket")),null!==this.WS&&this.WS.close()},e.prototype.onSocketClose=function(){var t=this;console.log("socket closed, reconnecting in ".concat(e.RECONNECT_INTERVAL,"ms")),this.disconnectEvent.dispatch(null),window.setTimeout((function(){return t.connect()}),e.RECONNECT_INTERVAL)},e.prototype.onSocketMessage=function(t){try{var e=JSON.parse(t.data);switch(e.request){case"CREATE":this.createEvent.dispatch(e);break;case"END":this.endEvent.dispatch(e);break;case"NO_VOTING_ROUND":this.noVoteRoundEvent.dispatch(e);break;case"UPDATE":this.updateEvent.dispatch(e);break;default:console.warn("unknown request type: ".concat(e.request))}}catch(t){console.error("failed to parse json data: ".concat(t))}},e.prototype.onSocketOpen=function(){console.log("successfully connected to websocket"),this.connectEvent.dispatch(null)},e.RECONNECT_INTERVAL=1e3,e}(),n=600,o=function(){function t(t){this.container=t,this.bar=document.createElement("div"),this.barProgression=document.createElement("div"),this.labelContainer=document.createElement("div"),this.labelLabel=document.createElement("span"),this.labelMatch=document.createElement("span"),this.labelValue=document.createElement("span"),this.bar.classList.add("bar"),this.barProgression.classList.add("progression"),this.labelContainer.classList.add("labelContainer"),this.labelContainer.append(this.labelMatch,this.labelLabel,this.labelValue),this.bar.append(this.barProgression),this.bar.append(this.labelContainer),this.container.append(this.bar)}return Object.defineProperty(t.prototype,"isDisabled",{set:function(t){var e="disabled";t?(this.bar.classList.add(e),this.barProgression.classList.add(e),this.labelContainer.classList.add(e)):(this.bar.classList.remove(e),this.labelContainer.classList.remove(e),this.barProgression.classList.remove(e))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"label",{set:function(t){this.labelLabel.innerText=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"match",{set:function(t){this.labelMatch.innerText=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{set:function(t){this.labelValue.innerText=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{set:function(t){this.barProgression.style.width=t},enumerable:!1,configurable:!0}),t.prototype.fadeIn=function(t,e){void 0===e&&(e=0),this.bar.style.animationDelay="".concat(e,"ms"),this.bar.style.animationDuration="".concat(t,"ms"),this.bar.classList.add("slideIn"),this.bar.classList.remove("slideOut")},t.prototype.fadeOut=function(t,e){void 0===e&&(e=0),this.bar.style.animationDelay="".concat(e,"ms"),this.bar.style.animationDuration="".concat(t,"ms"),this.bar.classList.add("slideOut"),this.bar.classList.remove("slideIn")},t}(),i=function(){function t(t,e){this.bars=[],this.container=t,this.onCreateVote=this.onCreateVote.bind(this),this.onDisconnect=this.onDisconnect.bind(this),this.onEndVote=this.onEndVote.bind(this),this.onUpdateVote=this.onUpdateVote.bind(this),e.addCreateVoteListener(this.onCreateVote),e.addDisconnectListener(this.onDisconnect),e.addEndVoteListener(this.onEndVote),e.addUpdateVoteListener(this.onUpdateVote)}return t.prototype.onCreateVote=function(){this.bars.forEach((function(t,e){var o=100*e;t.fadeOut(n,o),setTimeout((function(){t.isDisabled=!1,t.fadeIn(n)}),n+o)}))},t.prototype.onDisconnect=function(){this.bars.forEach((function(t,e){var o=100*e;t.fadeOut(n,o)}))},t.prototype.onEndVote=function(){this.bars.forEach((function(t){return t.isDisabled=!0}))},t.prototype.onUpdateVote=function(t){var e=this,n=t.retainInitialVotes,i=t.voteOptions,s=t.votingMode,r=t.totalVotes;if("PERCENTAGE"!==s||0!==r&&!n||(r+=i.length,i.forEach((function(t){return t.value++}))),i.length!==this.bars.length){for(;this.container.firstChild;)this.container.removeChild(this.container.firstChild);this.bars=i.map((function(t){return new o(e.container)}))}for(var a=0;a<i.length;a++){var c=this.bars[a],d=i[a];if(!c.isDisabled){var h;h=0===d.value?0:Math.floor(d.value/r*100),c.label=d.label,c.match=d.matches.join("/").concat("."),"MAJORITY"===s?c.value=d.value.toString():"PERCENTAGE"===s&&(c.value="".concat(h,"%")),c.width="".concat(h,"%")}}},t}(),s=document.getElementById("barContainer"),r=document.getElementById("totalVotes");if(null===s)throw new Error("could not find bar container in DOM");if(null===r)throw new Error("could not find total votes element in DOM");var a=new e("ws://localhost:9091");a.addConnectListener((function(){r.style.opacity="1"})),a.addDisconnectListener((function(){r.style.opacity="0"})),a.addUpdateVoteListener((function(t){r.innerText="Total Votes: ".concat(t.totalVotes)})),new i(s,a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,